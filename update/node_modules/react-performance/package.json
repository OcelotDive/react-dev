{
  "_args": [
    [
      {
        "raw": "react-performance@0.0.5",
        "scope": null,
        "escapedName": "react-performance",
        "name": "react-performance",
        "rawSpec": "0.0.5",
        "spec": "0.0.5",
        "type": "version"
      },
      "C:\\Users\\david.jolliffe\\Desktop\\react-dev\\update"
    ]
  ],
  "_from": "react-performance@0.0.5",
  "_id": "react-performance@0.0.5",
  "_inCache": true,
  "_location": "/react-performance",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/react-performance_0.0.5_1530128394315_0.6851661227811661"
  },
  "_npmUser": {
    "name": "amsul",
    "email": "reach@amsul.ca"
  },
  "_phantomChildren": {},
  "_requested": {
    "raw": "react-performance@0.0.5",
    "scope": null,
    "escapedName": "react-performance",
    "name": "react-performance",
    "rawSpec": "0.0.5",
    "spec": "0.0.5",
    "type": "version"
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "https://registry.npmjs.org/react-performance/-/react-performance-0.0.5.tgz",
  "_shasum": "36e3590b61c9260fcbff84bf87967f7f87e154cf",
  "_shrinkwrap": null,
  "_spec": "react-performance@0.0.5",
  "_where": "C:\\Users\\david.jolliffe\\Desktop\\react-dev\\update",
  "author": {
    "name": "Amsul",
    "email": "reach@amsul.ca"
  },
  "bugs": {
    "url": "https://github.com/amsul/react-performance/issues"
  },
  "dependencies": {
    "react-redux": "^5.0.6",
    "redux": "^3.7.2",
    "redux-batched-subscribe": "^0.1.6"
  },
  "description": "Helpers to debug and record component render performance",
  "devDependencies": {
    "babel-core": "^6.26.0",
    "babel-eslint": "^8.0.3",
    "babel-jest": "^21.2.0",
    "babel-plugin-external-helpers": "^6.22.0",
    "babel-preset-env": "^1.6.1",
    "babel-preset-es2015-rollup": "^3.0.0",
    "babel-preset-react": "^6.24.1",
    "babel-preset-stage-0": "^6.24.1",
    "eslint": "^4.13.0",
    "eslint-plugin-flowtype": "^2.40.1",
    "eslint-plugin-react": "^7.5.1",
    "flow-bin": "^0.61.0",
    "flow-typed": "^2.2.3",
    "rollup": "^0.52.1",
    "rollup-plugin-babel": "^3.0.2",
    "rollup-plugin-flow": "^1.1.1",
    "rollup-plugin-node-resolve": "^3.0.0",
    "watch": "^1.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "36e3590b61c9260fcbff84bf87967f7f87e154cf",
    "tarball": "https://registry.npmjs.org/react-performance/-/react-performance-0.0.5.tgz",
    "fileCount": 21,
    "unpackedSize": 54181
  },
  "files": [
    "dist/**",
    "lib/**"
  ],
  "homepage": "https://github.com/amsul/react-performance#readme",
  "jsnext:main": "dist/react-performance.js",
  "keywords": [],
  "license": "MIT",
  "main": "dist/react-performance.umd.js",
  "maintainers": [
    {
      "name": "amsul",
      "email": "reach@amsul.ca"
    }
  ],
  "module": "dist/react-performance.js",
  "name": "react-performance",
  "optionalDependencies": {
    "react-redux": "^5.0.6",
    "redux": "^3.7.2",
    "redux-batched-subscribe": "^0.1.6"
  },
  "peerDependencies": {
    "react": ">=16.0.0",
    "react-native": ">=0.50.0"
  },
  "readme": "# React Performance ðŸš€\n\nHelpers to debug and record component render performance\n\nWith the release of React Fiber in v16, `react-addons-perf` has officially become obsolete. This project aims to be a \"close enough\" alternate solution.\n\n#### Logs\n\n![](docs/renders.png)\n\n#### Reports\n\n![](docs/report.png)\n\n#### Timing\n\n![](docs/timing.png)\n\n<br />\n\n## Installation\n\n- [Yarn](https://yarnpkg.com): `yarn add react-performance`\n- [npm](https://www.npmjs.com): `npm install react-performance`\n\n<br />\n\n## Usage\n\n```js\nimport ReactPerformance from 'react-performance'\n```\n\nYou can also choose to import selectively:\n\n```js\nimport { measure, startRecording, printRecording } from 'react-performance'\n```\n\nNOTE: In a production environment, `ReactPerformance` disables itself.\n\n### Measure\n\nTo measure the rendering of a component, wrap it with the `measure` HOC:\n\n```js\nclass MyComponent extends React.Component {/* ... */}\n\nexport default ReactPerformance.measure({\n  getId: 'some_recognizable_identifier',\n  Component: MyComponent,\n  isCollapsed: false,\n})\n```\n\nThat's it. Now logs will print every time the component renders.\n\nIf you use Redux, read the section below on how to [Use with Redux](#use-with-redux).\n\n##### Options:\n\n- `getId` is a string or function that helps you uniquely identify each component being rendered in the logs.\n  - As a string, if it is a key of the component's `props`, the key and value are both used. Otherwise it is used as a static value.\n  - As a function, it receives `props` and returns a string.\n- `isCollapsed` is `true` by default.\n  - This collapses the duration & diff logs when a component renders.\n\n### Record\n\nTo generate reports, start recording data by running:\n\n```js\nReactPerformance.startRecording()\n```\n\nAnd then print out the report by running:\n\n```js\nReactPerformance.printRecording()\n```\n\nThis prints out a report on all the components being measured.\n\n### Use with Redux\n\n#### `connect`\n\nOnly \"smart\" components should be measured since those are typically the components that respond to state changes (and usually the only components that significantly impact performance).\n\nWith the assumption that any data passed down to components is encapsulated in a top-level state, the most appropriate way to use this with Redux is to use `ReactPerformance.connect`:\n\n```js\nclass MyComponent extends React.Component {/* ... */}\n\nexport default ReactPerformance.connect({\n  mapStateToProps,\n  mapDispatchToProps,\n  getId: 'some_recognizable_identifier',\n  Component: MyComponent,\n})\n```\n\nThis is equivalent to `ReactPerformance.measure` - except it also connects the component to the Redux store.\n\n#### `createStore`\n\nTo get measurements on the full duration across all component renders triggered by dispatching actions, a middleware is provided to create the store:\n\n```js\nconst enhancer = redux.compose(\n  // ...All other middleware first\n  // This must be the last one!\n  ReactPerformance.createNotifier(),\n)\nconst store = redux.createStore(rootReducer, enhancer)\n```\n\nThis will log measurements in batches of rerenders caused by updates to the store:\n\n![](docs/notifying.png)\n\n<br />\n\n---\n\nÂ© 2017 [Amsul](http://twitter.com/amsul_)\n\nLicensed under [MIT](http://amsul.ca/MIT)\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/amsul/react-performance.git"
  },
  "scripts": {
    "build": "rm -rf dist/ && yarn build:native && yarn build:rollup && yarn build:examples",
    "build:examples": "cp -a dist/. examples/src/dist/",
    "build:native": "cp -a lib/. dist/ && mv dist/index.js dist/react-performance.native.js",
    "build:rollup": "rollup -c",
    "develop": "watch 'yarn build' lib/.",
    "prepublish": "yarn build"
  },
  "version": "0.0.5"
}
