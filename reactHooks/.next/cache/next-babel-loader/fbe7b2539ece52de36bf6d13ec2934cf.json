{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david.jolliffe\\\\Desktop\\\\react-dev\\\\reactHooks\\\\components\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nconst ImageToggleOnScroll = ({\n  primaryImg,\n  secondaryImg\n}) => {\n  const myRef = useRef(null);\n  useEffect(() => {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    return () => {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    };\n  });\n  const {\n    0: inView,\n    1: setInView\n  } = useState(false);\n\n  const isInView = () => {\n    if (myRef.current) {\n      const rect = myRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  const scrollHandler = () => {\n    setInView(() => {\n      return isInView();\n    });\n  };\n\n  return __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: myRef,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["C:\\Users\\david.jolliffe\\Desktop\\react-dev\\reactHooks\\components\\ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","myRef","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,MAAMC,mBAAmB,GAAG,CAAC;AAACC,EAAAA,UAAD;AAAaC,EAAAA;AAAb,CAAD,KAAiC;AACzD,QAAMC,KAAK,GAAGN,MAAM,CAAC,IAAD,CAApB;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZM,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAAEC,QAAQ,EAAV,CAAT;AACA,WAAQ,MAAM;AACVJ,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFD;AAGH,GANQ,CAAT;AAQA,QAAM;AAAA,OAACI,MAAD;AAAA,OAASH;AAAT,MAAsBR,QAAQ,CAAC,KAAD,CAApC;;AAEA,QAAMS,QAAQ,GAAG,MAAM;AACnB,QAAIL,KAAK,CAACQ,OAAV,EAAmB;AACf,YAAMC,IAAI,GAAGT,KAAK,CAACQ,OAAN,CAAcE,qBAAd,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAW,CAAX,IAAgBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA7C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQA,QAAMV,aAAa,GAAG,MAAM;AACxBC,IAAAA,SAAS,CAAC,MAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD;;AAMA,SAEI;AAAK,IAAA,GAAG,EAAEE,MAAM,GAAGR,YAAH,GAAkBD,UAAlC;AAA8C,IAAA,GAAG,EAAC,EAAlD;AAAqD,IAAA,GAAG,EAAEE,KAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ;AAKH,CAhCD;;AAkCA,eAAeH,mBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from \"react\";\r\n\r\nconst ImageToggleOnScroll = ({primaryImg, secondaryImg }) => {\r\n    const myRef = useRef(null);\r\n    \r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", scrollHandler);\r\n        setInView (isInView());\r\n        return (() => {\r\n            window.removeEventListener(\"scroll\", scrollHandler);\r\n        }); \r\n    })\r\n    \r\n    const [inView, setInView] = useState(false);\r\n    \r\n    const isInView = () => {\r\n        if (myRef.current) {\r\n            const rect = myRef.current.getBoundingClientRect();\r\n            return rect.top >=0 && rect.bottom <= window.innerHeight;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    const scrollHandler = () => {\r\n        setInView(() => {\r\n            return isInView();\r\n        });\r\n    };\r\n    \r\n    return (\r\n       \r\n        <img src={inView ? secondaryImg : primaryImg} alt=\"\" ref={myRef} />\r\n       \r\n    );\r\n};\r\n\r\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}