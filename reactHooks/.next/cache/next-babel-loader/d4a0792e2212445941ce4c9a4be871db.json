{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\david.jolliffe\\\\Desktop\\\\react-dev\\\\reactHooks\\\\components\\\\ImageToggleOnScroll.js\";\nvar __jsx = React.createElement;\nimport React, { useRef, useEffect, useState } from \"react\";\n\nvar ImageToggleOnScroll = function ImageToggleOnScroll(_ref) {\n  var primaryImg = _ref.primaryImg,\n      secondaryImg = _ref.secondaryImg;\n  var myRef = useRef(null);\n\n  var _useState = useState(true),\n      isLoading = _useState[0],\n      setIsLoading = _useState[1];\n\n  useEffect(function () {\n    window.addEventListener(\"scroll\", scrollHandler);\n    setInView(isInView());\n    setIsLoading(false);\n    return function () {\n      window.removeEventListener(\"scroll\", scrollHandler);\n    }, [isLoading];\n  });\n\n  var _useState2 = useState(false),\n      inView = _useState2[0],\n      setInView = _useState2[1];\n\n  var isInView = function isInView() {\n    if (myRef.current) {\n      var rect = myRef.current.getBoundingClientRect();\n      return rect.top >= 0 && rect.bottom <= window.innerHeight;\n    }\n\n    return false;\n  };\n\n  var scrollHandler = function scrollHandler() {\n    setInView(function () {\n      return isInView();\n    });\n  };\n\n  return isLoading ? null : __jsx(\"img\", {\n    src: inView ? secondaryImg : primaryImg,\n    alt: \"\",\n    ref: myRef,\n    width: \"200\",\n    height: \"200\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  });\n};\n\nexport default ImageToggleOnScroll;","map":{"version":3,"sources":["C:\\Users\\david.jolliffe\\Desktop\\react-dev\\reactHooks\\components\\ImageToggleOnScroll.js"],"names":["React","useRef","useEffect","useState","ImageToggleOnScroll","primaryImg","secondaryImg","myRef","isLoading","setIsLoading","window","addEventListener","scrollHandler","setInView","isInView","removeEventListener","inView","current","rect","getBoundingClientRect","top","bottom","innerHeight"],"mappings":";;AAAA,OAAOA,KAAP,IAAeC,MAAf,EAAuBC,SAAvB,EAAkCC,QAAlC,QAAiD,OAAjD;;AAEA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,OAAiC;AAAA,MAA/BC,UAA+B,QAA/BA,UAA+B;AAAA,MAAnBC,YAAmB,QAAnBA,YAAmB;AACzD,MAAMC,KAAK,GAAGN,MAAM,CAAC,IAAD,CAApB;;AADyD,kBAEvBE,QAAQ,CAAC,IAAD,CAFe;AAAA,MAElDK,SAFkD;AAAA,MAEvCC,YAFuC;;AAIzDP,EAAAA,SAAS,CAAC,YAAM;AACZQ,IAAAA,MAAM,CAACC,gBAAP,CAAwB,QAAxB,EAAkCC,aAAlC;AACAC,IAAAA,SAAS,CAAEC,QAAQ,EAAV,CAAT;AACAL,IAAAA,YAAY,CAAC,KAAD,CAAZ;AACA,WAAQ,YAAM;AACVC,MAAAA,MAAM,CAACK,mBAAP,CAA2B,QAA3B,EAAqCH,aAArC;AACH,KAFO,EAEN,CAACJ,SAAD,CAFF;AAGH,GAPQ,CAAT;;AAJyD,mBAa7BL,QAAQ,CAAC,KAAD,CAbqB;AAAA,MAalDa,MAbkD;AAAA,MAa1CH,SAb0C;;AAezD,MAAMC,QAAQ,GAAG,SAAXA,QAAW,GAAM;AACnB,QAAIP,KAAK,CAACU,OAAV,EAAmB;AACf,UAAMC,IAAI,GAAGX,KAAK,CAACU,OAAN,CAAcE,qBAAd,EAAb;AACA,aAAOD,IAAI,CAACE,GAAL,IAAW,CAAX,IAAgBF,IAAI,CAACG,MAAL,IAAeX,MAAM,CAACY,WAA7C;AACH;;AACD,WAAO,KAAP;AACH,GAND;;AAQA,MAAMV,aAAa,GAAG,SAAhBA,aAAgB,GAAM;AACxBC,IAAAA,SAAS,CAAC,YAAM;AACZ,aAAOC,QAAQ,EAAf;AACH,KAFQ,CAAT;AAGH,GAJD;;AAMA,SAAON,SAAS,GAAG,IAAH,GAEZ;AAAK,IAAA,GAAG,EAAEQ,MAAM,GAAGV,YAAH,GAAkBD,UAAlC;AAA8C,IAAA,GAAG,EAAC,EAAlD;AAAqD,IAAA,GAAG,EAAEE,KAA1D;AAAiE,IAAA,KAAK,EAAC,KAAvE;AAA6E,IAAA,MAAM,EAAC,KAApF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAFJ;AAKH,CAlCD;;AAoCA,eAAeH,mBAAf","sourcesContent":["import React, {useRef, useEffect, useState} from \"react\";\r\n\r\nconst ImageToggleOnScroll = ({primaryImg, secondaryImg }) => {\r\n    const myRef = useRef(null);\r\n    const [isLoading, setIsLoading] = useState(true);\r\n    \r\n    useEffect(() => {\r\n        window.addEventListener(\"scroll\", scrollHandler);\r\n        setInView (isInView());\r\n        setIsLoading(false);\r\n        return (() => {\r\n            window.removeEventListener(\"scroll\", scrollHandler);\r\n        },[isLoading]); \r\n    })\r\n    \r\n    const [inView, setInView] = useState(false);\r\n    \r\n    const isInView = () => {\r\n        if (myRef.current) {\r\n            const rect = myRef.current.getBoundingClientRect();\r\n            return rect.top >=0 && rect.bottom <= window.innerHeight;\r\n        }\r\n        return false;\r\n    }\r\n    \r\n    const scrollHandler = () => {\r\n        setInView(() => {\r\n            return isInView();\r\n        });\r\n    };\r\n    \r\n    return isLoading ? null : (\r\n       \r\n        <img src={inView ? secondaryImg : primaryImg} alt=\"\" ref={myRef} width=\"200\" height=\"200\"/>\r\n       \r\n    );\r\n};\r\n\r\nexport default ImageToggleOnScroll;"]},"metadata":{},"sourceType":"module"}